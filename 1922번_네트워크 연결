#include <iostream>
#include <algorithm>
#include <queue>
#include <vector>
#include <math.h>

using namespace std;

int n, m, a, b, c, x, y, ans;
typedef pair <int, pair<int, int> > p;
priority_queue < p, vector<p>, greater<p>> pq;
int parent[100001];

int find(int x) {
	if (parent[x] < 0) return x;
	parent[x] = find(parent[x]);
	return parent[x];
}

void merge(int a, int b, int c) {
	a = find(a);
	b = find(b);
	if (a == b) return;
	parent[b] = a;
	ans += c;
}

void kruscal() {
	while (!pq.empty()) {
		int cost = pq.top().first;
		int to = pq.top().second.second;
		int from = pq.top().second.first;
		pq.pop();
		merge(from, to, cost);
	}
}


int main() {
	ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);

	cin >> n >> m;
	for (int i = 1; i <= n; i++) {
		parent[i] = -1;
	}
	for (int i = 1; i <= m; i++) {
		cin >> a >> b >> c;
		pq.push({ c,{a,b} });
	}

	kruscal();
	cout << ans << "\n";
}
