#include<iostream>
#include<algorithm>
#include<queue>
#include<cstring>


using namespace std;

int n,cnt,res;
int map[101][101];
int dx[4] = {0,1,0,-1};
int dy[4] = {1,0,-1,0};
bool visited[101][101];//dfs용
bool chk[101][101];//bfs용
queue <pair<pair<int, int>,int>> q;
pair<int, int> val;

int bfs(int c) {
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (map[i][j]==c) {
				q.push(make_pair(make_pair(i, j), 0));
				chk[i][j] = 1;
			}
		}
	}
	int res = 0;
	while (!q.empty()) {
		int s = q.size();
		for(int t=0;t<s;t++){
			int xx = q.front().first.first;
			int yy = q.front().first.second;
			res = q.front().second;
			q.pop();

			for (int i = 0; i < 4; i++) {
				int xxx = dx[i] + xx;
				int yyy = dy[i] + yy;
				
				if (xxx >= 0 && xxx < n && yyy >= 0 && yyy < n) {
					if (chk[xxx][yyy] || map[xxx][yyy]  == c) {
						continue;
					}
					if (map[xxx][yyy] && map[xxx][yyy] != c) {
						return res;
					}
					if (!chk[xxx][yyy] && map[xxx][yyy]==0) {
						chk[xxx][yyy] = 1;
						q.push(make_pair(make_pair(xxx,yyy),res+1));
					}
				}
			
			}
		}
	}
	
}
			


void dfs(int x, int y) {
	visited[x][y] = 1;
	map[x][y] = cnt;

	for (int i = 0; i < 4; i++) {
		int xx = x + dx[i];
		int yy = y + dy[i];
		if (xx >= 0 && xx < n && yy >= 0 && yy < n && !visited[xx][yy] && map[xx][yy]) {
			visited[xx][yy] = 1;
			dfs(xx, yy);
		}
	}

}

int main() {
	ios::sync_with_stdio(0); cin.tie(NULL); cout.tie(NULL);
	cin >> n;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			cin >> map[i][j];
		}
	}

	cnt = 1;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			if (!visited[i][j] && map[i][j]) {
				dfs(i,j);
				cnt++;
			}
		}
	}

	int ans = 999999;

	for (int i = 1; i < cnt; i++) {
		while (q.size()) {
			q.pop();
		}
		memset(chk, false, sizeof(chk));
		ans = min(ans, bfs(i));
	}

	cout << ans;

}



